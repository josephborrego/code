#include<stdio.h>
#include<stdlib.h>
#include"List.h"

int main(int argc, char **argv)
{
	struct Node *myList = constructList(0);
	size_t i=0;
	for(i=1; i<argc; i++)
	{
		char command = ' ';
		int option = 0;
		fprintf(stderr, "Processing command '%s'.\n", argv[i]);
		sscanf(argv[i], "-%c:%d", &command, &option);
		fprintf(stderr, "Command '%c', option '%d'.\n", command, option);

		switch(command)
		{
		case 'c':
			myList = destroyList(myList);
			myList = constructList(option);
			break;
		case 's':
			fprintf(stdout, "Size: %d.\n", size(myList));
			break;
		case 'i':
			myList = insert(myList, option);
			break;
		case 'f':
			if(find(myList, option) == 0)
			{
				fprintf(stdout, "%d is not found.\n", option);
			}
			else
			{
				fprintf(stdout, "%d found.\n", option);
			}
			break;
		case 't':
			{
				char *buffer = (char *)malloc(option * sizeof(char));
				int i=0;
				for(i=0; i<option; i++)
				{
					buffer[i] = '\0';
				}

				if(traverse(myList, buffer) == 0)
				{
					fprintf(stdout, "List is empty.\n");
				}
				else
				{
					fprintf(stdout, "List: %s.\n", buffer);
				}

				free(buffer);
			}
			break;
		case 'r':
			myList = removeItem(myList, option);
			break;

		case 'T':
			{
				char *printable = traverse2(myList);
				fprintf(stdout, "List: %s.\n", printable);
				free(printable);
			}
			break;

		default:
			fprintf(stderr, "Invalid command %c.\n", command);
			break;
		}
	}

	myList = destroyList(myList);
	//valgrind should report no memory leaks at this point

	return 0;
}
