/*
CSE 109: Spring 2017
<Joseph Borrego>
<job218>
<Linked List>
Program #3
*/

#include<string.h>
#include <stdlib.h>
#include <stdio.h>
#include "List.h"


	struct Node* constructList(int newVal)
	{
		// creating a new node
		struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));

		//newNode's value is going to be set equal to newVal
		newNode->val = newVal;

		//returning the pointer to the node
		return newNode;
	}

	struct Node* destroyList(struct Node* oldNode)
	{
		//if this node has a value in it's next node variable, destroy that first
		if(oldNode->nextNode == NULL)
		{
			//calls it recursively
			destroyList(oldNode->nextNode);

			//set the nextNode value to NULL
			oldNode->nextNode = NULL;
		}

		free(oldNode);

		return NULL;
	}


	//counting how many are in the linked list
	size_t size(struct Node* firstNode)
	{

		if(firstNode == NULL)
		{
			return 0;
		}

		int count = 1;

		struct Node* currentNode = firstNode;

		//keep looping until it hits the end of the linked list
		while(currentNode->nextNode != NULL)
		{
			count++;
			currentNode =  currentNode->nextNode;
		}

		return count;

	}

	struct Node* insert(struct Node* firstNode, int newVal)
	{

		struct Node* currentNode = firstNode;

		while(currentNode->nextNode != NULL)
		{
			currentNode = currentNode->nextNode;
		}

		//mallocing for a new node
		currentNode->nextNode = (struct Node*)malloc(sizeof(struct Node));

		//giving the new node the new value
		currentNode->nextNode->val = newVal;

		return currentNode->nextNode;
	}


	int find(struct Node * firstNode, int searchNum)
	{

		struct Node* currentNode = firstNode;

		while(currentNode->nextNode != NULL)
		{

			if(currentNode->val == searchNum)
			{
				return 1;
			}

			currentNode = currentNode->nextNode;
		}

	//we're at the very end check to see if the last node is the value we're looking
	//for
		if(currentNode->val == searchNum)
		{
			return 1;
		}

		return 0;

	}


	int traverse(struct Node* firstNode, char* outString)
	{

		if(firstNode == NULL)
		{
			strcpy(outString, "");
			return 0;
		}

		struct Node* currentNode = firstNode;

		while(currentNode->nextNode != NULL)
		{
			strcat(outString, itoa(currentNode->val));
			printf(" %s", outString);
			strcat(outString, ", ");

			currentNode = currentNode->nextNode;
		}

		//node right beofre NULL
		strcat(outString, itoa(currentNode->val);

		return 1;

	}

	struct Node* removeItem(struct Node* firstNode, int num)
	{

	if(firstNode == NULL)
	{
		return NULL;
	}

	struct Node* startNode = firstNode;
	struct Node* currentNode = firstNode;
	struct Node* savedNode = firstNode;
	struct Node* tempNode;

	while(currentNode->nextNode != NULL)
	{

		if(currentNode->val == num)
		{
			//temp node = next one
			tempNode = currentNode->nextNode;

			if(currentNode == startNode)
			{
				startNode = currentNode->nextnode;
			}

			if(currentNode == savedNode)
            {
				savedNode = currentNode->nextnode;
            }

			//free the current one
			free(currentNode);

			//step to the next node
			currentNode = tempNode;
		}

		else
			{

				if(savedNode != currentNode)
				{
					savedNode->nextNode = currentNode;
				}

				savedNode = currentNode;

			}

	}

	if(currentNode->val == num)
	{
		savedNode->nextNode = NULL;
		free(currentNode);
	}

	return startNode;

	}


	char* traverse2(struct Node* firstNode)
	{

	//the string is #, space and -1 for the last number (null)
	size_t outputSize = 3*size(firstNode) - 1;

	//malloc for the output string
	char* outputString = (char*)malloc(sizeof(char) * outputSize);

	//call the function with the parameters from the first traverse function
	traverse(firstNode, outputString);

	//return filled string
	return outputString;

	}


	int main(int argc, char *argv[])
	{

	struct Node *myList = constructList(0);
    size_t i=0;

    for(i=1; i<argc; i++)
    {
     	char command = ' ';
        int option = 0;
        fprintf(stderr, "Processing command '%s'.\n", argv[i]);
        sscanf(argv[i], "-%c:%d", &command, &option);
        fprintf(stderr, "Command '%c', option '%d'.\n", command, option);

        switch(command)
        {
	case 'c':
            myList = destroyList(myList);
            myList = constructList(option);
            break;
        case 's':
            fprintf(stdout, "Size: %d.\n", size(myList));
            break;
        case 'i':
            myList = insert(myList, option);
            break;
        case 'f':
            if(find(myList, option) == 0)
            {
             	fprintf(stdout, "%d is not found.\n", option);
            }
            else
            {
             	fprintf(stdout, "%d found.\n", option);
            }
            break;
        case 't':
            {
             	char *buffer = (char *)malloc(option * sizeof(char));
                int i=0;
                for(i=0; i<option; i++)
                {
                    buffer[i] = '\0';
                }

                if(traverse(myList, buffer) == 0)
 {
                    fprintf(stdout, "List is empty.\n");
                }
                else
                {
                    fprintf(stdout, "List: %s.\n", buffer);
                }

                free(buffer);
            }
            break;
        case 'r':
            myList = removeItem(myList, option);
            break;

        case 'T':
            {
             	char *printable = traverse2(myList);
                fprintf(stdout, "List: %s.\n", printable);
                free(printable);
            }
            break;

        default:
            fprintf(stderr, "Invalid command %c.\n", command);
            break;
        }
    }

    myList = destroyList(myList);
    //valgrind should report no memory leaks at this point

    return 0;








	return 0;

	}
